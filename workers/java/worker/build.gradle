import net.minecraftforge.gradle.patcher.PatcherConstants

buildscript {
    repositories {
        jcenter()
        maven { url = "http://repo.spongepowered.org/maven" }
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.5-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

version = "0.0.1"
group = "com.hrznstudio.spatial"
archivesBaseName = "Spatial"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

def core_plugin = "com.hrznstudio.spatial.mixin.SpatialPlugin"

minecraft {
    version = "1.12.2-14.23.5.2808"
    runDir = "run"
    mappings = "stable_39"
    clientJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spongepowered.org/maven/'
    }
}

dependencies {
    compile 'info.picocli:picocli:3.8.2'
    compile('org.reflections:reflections:0.9.11') {
        transitive = false
    }
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        transitive = false
    }
    compile 'org.javassist:javassist:3.21.0-GA'
    compile project(':worker-sdk')
    compile project('patcherdummy')
}

jar {
    with copySpec {
        from{
            (configurations.forgeGradleMc.resolvedConfiguration.resolvedArtifacts
                    + configurations.forgeGradleMcDeps.resolvedConfiguration.resolvedArtifacts
//                + configurations.forgeGradleMcDepsClient.resolvedConfiguration.resolvedArtifacts
//                + configurations.forgeGradleMcNatives.resolvedConfiguration.resolvedArtifacts
//                + configurations.forgeGradleUserDevPackage.resolvedConfiguration.resolvedArtifacts
                    + configurations.compile.resolvedConfiguration.resolvedArtifacts
            ).collect {
                logger.info("Copying ${it.file} for config $it")
                it.file.isDirectory() ? it.file : zipTree(it.file)
            }
        }
        exclude '**/META-INF/services/**'
        exclude '**/META-INF/*.SF'
        exclude '**/META-INF/*.DSA'
        exclude '**/META-INF/*.RSA'
    }

    manifest {
        attributes([
                'Main-Class': gradle.ext.mainClass,
                'FMLAT'         : 'spatial_at.cfg',
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
                'Timestamp'     : System.currentTimeMillis()
        ])
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
